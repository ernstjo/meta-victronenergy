From 0c2eb7b5c06652043eba43de2ce345489f768b77 Mon Sep 17 00:00:00 2001
From: Teppo Kurki <teppo.kurki@iki.fi>
Date: Sun, 23 Jul 2023 09:24:07 +0300
Subject: [PATCH] feature: override for MFD addresses

Add env variable MFD_ADDRESS_SCRIPT to allow overriding the
default MFD advertisement addresses with a shell script that
outputs a comma delimited list of addresses to advertise.

==

Above was taken from https://github.com/SignalK/signalk-server/pull/1586

And then, since thats for the .ts (TypeScript) source, modified to patch the
.js (javascript) equivalent. For further details see:

https://github.com/victronenergy/venus-private/issues/260

--- a/lib/interfaces/mfd_webapp.js
+++ b/lib/interfaces/mfd_webapp.js
@@ -1,15 +1,27 @@
 "use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
 var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
 Object.defineProperty(exports, "__esModule", { value: true });
 const dgram_1 = __importDefault(require("dgram"));
+const util_1 = require("util");
+const child_process_1 = require("child_process");
 const os_1 = require("os");
 const debug_1 = require("../debug");
 const ports_1 = require("../ports");
 const PUBLISH_PORT = 2053;
 const MULTICAST_GROUP_IP = '239.2.1.1';
 const debug = (0, debug_1.createDebug)('signalk-server:interfaces:mfd_webapps');
+const execP = (0, util_1.promisify)(child_process_1.exec);
 // For debugging you can use
 // tcpdump -i en0 -A  -v net 239.2.1.1
 // eslint-disable-next-line @typescript-eslint/no-explicit-any
@@ -62,13 +74,20 @@
     });
     socket.bind(PUBLISH_PORT, fromAddress);
 };
-const getPublishToNavico = (protocol, port) => () => {
+const getPublishToNavico = (protocol, port) => () => __awaiter(void 0, void 0, void 0, function* () {
+    let addresses = [];
     // eslint-disable-next-line @typescript-eslint/no-unused-vars
     for (const [name, infos] of Object.entries((0, os_1.networkInterfaces)())) {
         for (const addressInfo of infos || []) {
             if (addressInfo.family === 'IPv4') {
-                send(getPublishMessage(protocol, addressInfo.address, port), addressInfo.address, MULTICAST_GROUP_IP, PUBLISH_PORT);
+                addresses.push(addressInfo.address);
             }
         }
     }
-};
+    if (process.env.MFD_ADDRESS_SCRIPT) {
+        addresses = (yield execP(process.env.MFD_ADDRESS_SCRIPT)).stdout
+            .trim()
+            .split(',');
+    }
+    addresses.forEach((address) => send(getPublishMessage(protocol, address, port), address, MULTICAST_GROUP_IP, PUBLISH_PORT));
+});
